// Copyright 2020 Contributors to the Parsec project.
// SPDX-License-Identifier: Apache-2.0

//! # PSA key material types

use picky_asn1::wrapper::IntegerAsn1;
use serde::{Deserialize, Serialize};

/// Native definition of the information required to describe an RSA public key. See the PSA spec
/// for more details on this struct definition.
#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct RsaPublicKey {
    /// The modulus of this key material.
    modulus: IntegerAsn1, // n
    /// The public exponent of this key material.
    public_exponent: IntegerAsn1, // e
}

/// Native definition of the information required to describe an RSA private key. See the PSA spec
/// for more details on this struct definition.
#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct RsaPrivateKey {
    /// The version of this key material.
    version: IntegerAsn1, // must be 0

    /// The modulus of this key material.
    modulus: IntegerAsn1, // n

    /// The public exponenent of this key material.
    public_exponent: IntegerAsn1, // e

    /// The private exponenent of this key material.
    private_exponent: IntegerAsn1, // d

    /// The first prime for this key material.
    prime_1: IntegerAsn1, // p

    /// The second prime for this key material.
    prime_2: IntegerAsn1, // q

    /// The first exponent for this key material.
    exponent_1: IntegerAsn1, // d mod (p - 1)

    /// The second exponent for this key material.
    exponent_2: IntegerAsn1, // d mod (q - 1)

    /// The coefficient for this key material.
    coefficient: IntegerAsn1, // (inverse of q) mod p
}

#[cfg(test)]
mod test {
    use super::{RsaPrivateKey, RsaPublicKey};
    use picky_asn1_der;

    const VALID_PUBLIC_KEY_BYTES: [u8; 140] = [
        0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0x85, 0x9F, 0x51, 0xCA, 0xC7, 0xB6, 0x51, 0xF2,
        0xF3, 0x13, 0x52, 0xBF, 0x96, 0xD4, 0x21, 0xA3, 0xA3, 0x7A, 0x9A, 0x00, 0x15, 0x1B, 0xB2,
        0x3F, 0xD6, 0x89, 0xFB, 0xF3, 0xD7, 0xAC, 0x21, 0xE2, 0xE9, 0x35, 0x2D, 0x8B, 0x37, 0xBB,
        0x19, 0x51, 0x7D, 0xE9, 0xFB, 0xBB, 0xF8, 0xB3, 0x1F, 0x9D, 0xC8, 0x41, 0x94, 0xAB, 0x72,
        0x66, 0x37, 0x29, 0xE7, 0x30, 0xC5, 0xA9, 0x78, 0x5E, 0x07, 0xA5, 0xFA, 0x90, 0x60, 0x81,
        0xFE, 0x92, 0x33, 0xD4, 0xC3, 0x62, 0x3A, 0x44, 0x92, 0x1B, 0xAB, 0x2C, 0xAC, 0x1B, 0x22,
        0x3C, 0x43, 0x76, 0x84, 0x86, 0x71, 0xA9, 0x21, 0x77, 0x02, 0x87, 0x10, 0x6B, 0xF5, 0xFE,
        0x55, 0xF6, 0x76, 0x1A, 0x5C, 0x83, 0x1B, 0xC3, 0x9A, 0xD1, 0x50, 0x65, 0x03, 0x83, 0xEB,
        0x00, 0xAE, 0x7C, 0xDD, 0xC4, 0x47, 0x48, 0xDF, 0xCA, 0x6D, 0x9E, 0x78, 0x38, 0x09, 0x25,
        0x02, 0x03, 0x01, 0x00, 0x01,
    ];

    const VALID_PRIVATE_KEY_BYTES: [u8; 608] = [
        0x30, 0x82, 0x02, 0x5C, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0x85, 0x9F, 0x51, 0xCA,
        0xC7, 0xB6, 0x51, 0xF2, 0xF3, 0x13, 0x52, 0xBF, 0x96, 0xD4, 0x21, 0xA3, 0xA3, 0x7A, 0x9A,
        0x00, 0x15, 0x1B, 0xB2, 0x3F, 0xD6, 0x89, 0xFB, 0xF3, 0xD7, 0xAC, 0x21, 0xE2, 0xE9, 0x35,
        0x2D, 0x8B, 0x37, 0xBB, 0x19, 0x51, 0x7D, 0xE9, 0xFB, 0xBB, 0xF8, 0xB3, 0x1F, 0x9D, 0xC8,
        0x41, 0x94, 0xAB, 0x72, 0x66, 0x37, 0x29, 0xE7, 0x30, 0xC5, 0xA9, 0x78, 0x5E, 0x07, 0xA5,
        0xFA, 0x90, 0x60, 0x81, 0xFE, 0x92, 0x33, 0xD4, 0xC3, 0x62, 0x3A, 0x44, 0x92, 0x1B, 0xAB,
        0x2C, 0xAC, 0x1B, 0x22, 0x3C, 0x43, 0x76, 0x84, 0x86, 0x71, 0xA9, 0x21, 0x77, 0x02, 0x87,
        0x10, 0x6B, 0xF5, 0xFE, 0x55, 0xF6, 0x76, 0x1A, 0x5C, 0x83, 0x1B, 0xC3, 0x9A, 0xD1, 0x50,
        0x65, 0x03, 0x83, 0xEB, 0x00, 0xAE, 0x7C, 0xDD, 0xC4, 0x47, 0x48, 0xDF, 0xCA, 0x6D, 0x9E,
        0x78, 0x38, 0x09, 0x25, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x81, 0x80, 0x08, 0xAB, 0xBD,
        0xBE, 0x43, 0xA6, 0xEA, 0x5A, 0xF2, 0x58, 0x98, 0xE8, 0x4B, 0x54, 0x91, 0x29, 0x42, 0x00,
        0xC0, 0xF1, 0x0B, 0xED, 0x9B, 0xEB, 0xC6, 0x13, 0x76, 0xA8, 0xCC, 0x60, 0x44, 0x63, 0xA9,
        0xDF, 0xF4, 0x48, 0x62, 0x31, 0xAF, 0x33, 0x29, 0x51, 0x4F, 0x6F, 0x53, 0x74, 0x66, 0x33,
        0x12, 0x2D, 0x65, 0x45, 0x19, 0xDB, 0x95, 0xAD, 0x4F, 0xAE, 0x0B, 0xC9, 0x93, 0x40, 0xC0,
        0xCC, 0xB5, 0xBB, 0x45, 0x6D, 0xA2, 0x00, 0x7B, 0xA8, 0x71, 0x82, 0xF2, 0x71, 0x35, 0x1E,
        0x9D, 0x88, 0x53, 0xE9, 0x2C, 0x04, 0x29, 0x07, 0x16, 0x71, 0x88, 0x7E, 0x85, 0xBB, 0x84,
        0x8A, 0x1E, 0x84, 0x06, 0x39, 0x20, 0x0C, 0xD7, 0x26, 0xFE, 0x3A, 0x68, 0xB2, 0x94, 0x85,
        0xA2, 0xC0, 0x79, 0x94, 0x2A, 0xDF, 0x7F, 0x2C, 0xE1, 0xA3, 0x80, 0x03, 0x47, 0xBC, 0xE2,
        0x18, 0x48, 0x30, 0xF8, 0xD9, 0x02, 0x41, 0x00, 0xBC, 0xB8, 0x19, 0x7C, 0x8C, 0xBC, 0x6D,
        0x94, 0x78, 0x4D, 0xDD, 0x52, 0x0D, 0xF7, 0x1A, 0x2F, 0xCB, 0x39, 0x91, 0xE4, 0x93, 0x26,
        0xFC, 0x34, 0xCF, 0x71, 0xB3, 0x49, 0x09, 0xF6, 0xCD, 0xDD, 0x9B, 0xA0, 0xDC, 0x67, 0xEC,
        0x10, 0x8A, 0xCB, 0xA5, 0xB0, 0x94, 0x27, 0x27, 0x3C, 0x77, 0xB2, 0x9E, 0xB2, 0xDC, 0xBF,
        0x2C, 0xF8, 0xCF, 0x9F, 0xA5, 0x6B, 0xCF, 0xE5, 0x8C, 0x36, 0x04, 0xAD, 0x02, 0x41, 0x00,
        0xB5, 0x42, 0xAE, 0x0D, 0x97, 0x26, 0x5A, 0x47, 0x44, 0x0E, 0xE7, 0x2D, 0xCE, 0x4C, 0xE3,
        0x85, 0x3A, 0x00, 0x76, 0xC8, 0xC3, 0xD0, 0x7D, 0x66, 0xA9, 0x36, 0x04, 0x65, 0xAA, 0x92,
        0x27, 0x20, 0xC4, 0x26, 0xB5, 0xB5, 0xC6, 0x69, 0x06, 0xE4, 0x16, 0x13, 0xAC, 0xCB, 0x29,
        0x77, 0xBE, 0xA1, 0x38, 0x19, 0x25, 0x03, 0xD0, 0xC4, 0x24, 0xFA, 0xC3, 0x8F, 0xF1, 0x28,
        0xDA, 0xD6, 0x2D, 0x59, 0x02, 0x40, 0x24, 0xA2, 0x50, 0x40, 0x3F, 0x49, 0xAC, 0xB3, 0xEF,
        0x8E, 0x9D, 0xF1, 0xF9, 0xC8, 0x08, 0x0B, 0x53, 0x15, 0xFF, 0xDE, 0x31, 0x3A, 0x96, 0x26,
        0xE2, 0x46, 0x1E, 0x19, 0x85, 0x97, 0xA5, 0x6A, 0xE9, 0x75, 0x16, 0x94, 0x0D, 0xDD, 0x40,
        0x34, 0x3C, 0x1B, 0xC5, 0x06, 0xBC, 0xB5, 0x1E, 0x3F, 0x4C, 0x53, 0x48, 0x4A, 0xCC, 0x3E,
        0x18, 0x7F, 0xD3, 0x2A, 0xD4, 0x96, 0xA8, 0xDB, 0x2B, 0x99, 0x02, 0x40, 0x76, 0xF3, 0x4B,
        0x45, 0x9F, 0xEB, 0x8B, 0x53, 0x39, 0x56, 0x8E, 0x5F, 0x81, 0x02, 0xF4, 0x4C, 0x79, 0xC3,
        0xD4, 0x2F, 0xEC, 0x50, 0xE5, 0xFA, 0x79, 0x10, 0xF9, 0xD1, 0xBE, 0x1E, 0x2B, 0x8F, 0x55,
        0x2A, 0x12, 0x15, 0x38, 0x1F, 0xB4, 0x65, 0xFA, 0x16, 0xEF, 0x4E, 0x63, 0xE8, 0x31, 0x31,
        0x9B, 0x9E, 0xE4, 0xAB, 0x9C, 0x55, 0x1B, 0xEF, 0x74, 0x67, 0x01, 0xDB, 0xCD, 0xC0, 0xC0,
        0x01, 0x02, 0x41, 0x00, 0xB5, 0x68, 0x6F, 0xF3, 0xF4, 0x14, 0x37, 0x5F, 0x80, 0xA2, 0xB0,
        0x20, 0x5D, 0x95, 0xCF, 0xB8, 0xB2, 0xFC, 0xCA, 0x02, 0x2D, 0x82, 0xA7, 0xB7, 0xDE, 0x7F,
        0x7F, 0xF3, 0x35, 0x51, 0x80, 0xDF, 0xB5, 0x05, 0xDC, 0x25, 0x55, 0x83, 0xFA, 0x40, 0xEB,
        0x58, 0x1B, 0xF1, 0xA1, 0x48, 0x4D, 0xEF, 0xD6, 0x7E, 0x76, 0xC3, 0x35, 0x9F, 0xB9, 0xD5,
        0xFC, 0xA3, 0x76, 0x6D, 0x0E, 0x3A, 0x38, 0x65,
    ];

    #[test]
    fn test_rsa_public_key_deserialization() {
        // This test is checking that we can successfully deserialize a valid public key in byte
        // form.
        let _public_key: RsaPublicKey = picky_asn1_der::from_bytes(&VALID_PUBLIC_KEY_BYTES)
            .expect("Failed to deserialize public key.");
    }

    #[test]
    fn test_rsa_private_key_deserialization() {
        // This test is checking that we can successfully deserialize a valid private key in byte
        // form.
        let _private_key: RsaPrivateKey = picky_asn1_der::from_bytes(&VALID_PRIVATE_KEY_BYTES)
            .expect("Failed to deserialize private key.");
    }

    #[test]
    fn test_rsa_private_key_deserialization_mismatch() {
        // This test is checking that trying to deserialize a public key into a RsaPrivateKey
        // struct fails. This should fail, since the public key is shorter than the private key,
        // and does not have enough bytes to 'fill' the struct.
        let _ = picky_asn1_der::from_bytes::<RsaPrivateKey>(&VALID_PUBLIC_KEY_BYTES)
            .expect_err("Unexpectedly deserialized a public key as a private key!");
    }

    #[test]
    fn test_rsa_public_key_garbage_data() {
        // This test is checking that trying to deserialize garbage data as a public key fails.
        let garbage_bytes: [u8; 11] = [
            0xDE, 0xAD, 0xBE, 0xEF, 0xCA, 0xFE, 0xBA, 0xBE, 0xDA, 0xDB, 0x0D,
        ];
        let _ = picky_asn1_der::from_bytes::<RsaPublicKey>(&garbage_bytes)
            .expect_err("Unexpectedly deserialized random bytes as public key!");
    }

    #[test]
    fn test_rsa_private_key_garbage_data() {
        // This test is checking that trying to deserialize garbage data as a private key fails.
        let garbage_bytes: [u8; 11] = [
            0xCA, 0xFE, 0xBA, 0xBE, 0xDA, 0xDB, 0x0D, 0xDE, 0xAD, 0xBE, 0xEF,
        ];
        let _ = picky_asn1_der::from_bytes::<RsaPrivateKey>(&garbage_bytes)
            .expect_err("Unexpectedly deserialized random bytes as private key!");
    }
}
